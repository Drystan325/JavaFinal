/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package javafinalproject;

import java.awt.HeadlessException;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public class staffinventory extends javax.swing.JFrame {

    Connection con;
    PreparedStatement ps;
    ResultSet rs;
    Statement st;

    public staffinventory() {
        initComponents();
        this.setLocationRelativeTo(null);
        date();
        time();
        table();

    }

    public void username(String user) {

        User.setText(user);

        try {
            Statement st = con.createStatement();
            con = connection.connectDB();
            String sql = "select * FROM user WHERE username = '" + user + "'";
            rs = st.executeQuery(sql);
            while (rs.next()) {
                String u = rs.getString("user_id");
                userid.setText(u);
            }

        } catch (Exception e) {

        }

    }

    public void date() {

        Date d = new Date();
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        String day = sdf.format(d);
        dat.setText(day);

    }

    public void time() {
        new javax.swing.Timer(0, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                Date d = new Date();
                SimpleDateFormat f = new SimpleDateFormat("hh:mm:ss a");
                timer.setText(f.format(d));
            }
        }).start();
    }

    private void lowstock() {
        con = connection.connectDB();
        DefaultTableModel tblModel = (DefaultTableModel) table.getModel();
        while (tblModel.getRowCount() > 0) {
            tblModel.removeRow(0);
        }

        try {
            Statement st = con.createStatement();
            String sql;
            sql = "SELECT * FROM `items` WHERE `quantity`<11";
            rs = st.executeQuery(sql);

            while (rs.next()) {

                String code = rs.getString("code");
                String item = rs.getString("item");
                String description = rs.getString("description");
                String quantity = rs.getString("quantity");
                String status = rs.getString("status");

                String tbData[] = {code, item, description, quantity, status};
                tblModel.addRow(tbData);

            }

        } catch (Exception e) {
        }
    }

    private void table() {
        con = connection.connectDB();
        DefaultTableModel tblModel = (DefaultTableModel) table.getModel();
        while (tblModel.getRowCount() > 0) {
            tblModel.removeRow(0);
        }
        try {
            Statement st = con.createStatement();
            String sql;
            sql = "SELECT * FROM items";
            rs = st.executeQuery(sql);

            while (rs.next()) {

                String code = rs.getString("code");
                String item = rs.getString("item");
                String description = rs.getString("description");
                String quantity = rs.getString("quantity");
                String status = rs.getString("status");

                String tbData[] = {code, item, description, quantity, status};
                tblModel.addRow(tbData);

            }

        } catch (Exception e) {
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        timer = new javax.swing.JLabel();
        dat = new javax.swing.JLabel();
        User = new javax.swing.JLabel();
        additem = new javax.swing.JButton();
        updateitem = new javax.swing.JButton();
        removeitem = new javax.swing.JButton();
        stockin = new javax.swing.JButton();
        stockout = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        lowstock = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        codefield = new javax.swing.JTextField();
        itemf = new javax.swing.JTextField();
        descripf = new javax.swing.JTextField();
        aquantf = new javax.swing.JTextField();
        mquantf = new javax.swing.JTextField();
        status = new javax.swing.JTextField();
        all = new javax.swing.JButton();
        userid = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        timer.setText("time");

        dat.setText("date");

        User.setText("user");

        additem.setText("Add New Item");
        additem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                additemActionPerformed(evt);
            }
        });

        updateitem.setText("Update Item");
        updateitem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateitemActionPerformed(evt);
            }
        });

        removeitem.setText("Remove Item");
        removeitem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeitemActionPerformed(evt);
            }
        });

        stockin.setText("Stock In");
        stockin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stockinActionPerformed(evt);
            }
        });

        stockout.setText("Stock Out");
        stockout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stockoutActionPerformed(evt);
            }
        });

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "code", "item", "description", "quantity", "status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, true, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(table);

        lowstock.setText("Low Stock Item");
        lowstock.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lowstockActionPerformed(evt);
            }
        });

        jButton7.setText("Log Out");

        jLabel4.setText("Item:");

        jLabel6.setText("code:");

        jLabel7.setText("Description:");

        jLabel8.setText("Available Quantity:");

        jLabel10.setText("Manage Quantity:");

        jLabel11.setText("Status:");

        all.setText("All Items");
        all.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allActionPerformed(evt);
            }
        });

        userid.setText("id");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap(18, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(all, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 710, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(userid, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(User, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(dat, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(timer, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(15, 15, 15))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(117, 117, 117)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(codefield)
                    .addComponent(itemf, javax.swing.GroupLayout.DEFAULT_SIZE, 164, Short.MAX_VALUE)
                    .addComponent(descripf, javax.swing.GroupLayout.DEFAULT_SIZE, 164, Short.MAX_VALUE)
                    .addComponent(aquantf, javax.swing.GroupLayout.DEFAULT_SIZE, 164, Short.MAX_VALUE)
                    .addComponent(mquantf, javax.swing.GroupLayout.DEFAULT_SIZE, 164, Short.MAX_VALUE)
                    .addComponent(status, javax.swing.GroupLayout.DEFAULT_SIZE, 164, Short.MAX_VALUE))
                .addGap(49, 49, 49)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(additem, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(updateitem, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(removeitem, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lowstock, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(stockin, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(stockout, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(timer, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dat, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(User, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(userid)
                .addGap(18, 18, 18)
                .addComponent(all)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(codefield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(additem))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(itemf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(updateitem))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(descripf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(removeitem))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(aquantf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lowstock))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mquantf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(stockin))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(status, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(stockout))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton7)
                .addGap(15, 15, 15))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void updateitemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateitemActionPerformed
        // TODO add your handling code here:
        DefaultTableModel t = (DefaultTableModel) table.getModel();
        int selectIndex = table.getSelectedRow();
        String id2 = (String) t.getValueAt(selectIndex, 0);

        String item = itemf.getText();
        String description = descripf.getText();
        String available = aquantf.getText();
        String manage = mquantf.getText();
        String stat = status.getText();

        if (manage.equals("")) {
            try {
                String sql = "UPDATE `items` SET item=? ,description=? ,quantity=? ,status=? WHERE code=?";
                ps = con.prepareStatement(sql);

                ps.setString(1, item);
                ps.setString(2, description);
                ps.setString(3, available);
                ps.setString(4, stat);
                ps.setString(5, id2);

                ps.executeUpdate();
                JOptionPane.showMessageDialog(null, "Update Successful! ");
                String users = User.getText();
                String transaction = "updated the Item " + item + "";
                String code = codefield.getText();
                String dates = dat.getText();
                String times = timer.getText();

                ps = con.prepareStatement("INSERT INTO `transactions`(user,transaction,date,time,code,item,quantity) VALUES (?,?,?,?,?,?,?)");

                ps.setString(1, users);
                ps.setString(2, transaction);
                ps.setString(3, dates);
                ps.setString(4, times);
                ps.setString(5, code);
                ps.setString(6, item);
                ps.setString(7, available);

                ps.executeUpdate();
                codefield.setText("");
                itemf.setText("");
                descripf.setText("");
                aquantf.setText("");
                status.setText("");

            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "ERROR!", "ERROR", JOptionPane.ERROR_MESSAGE);
            }
            table();
        } else {
            JOptionPane.showMessageDialog(this, "To Update Quantity, Choose Wether To Stock In Or Stock Out Quantity!", "ERROR", JOptionPane.ERROR_MESSAGE);
//            mqf.setText("");
        }

    }//GEN-LAST:event_updateitemActionPerformed

    private void removeitemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeitemActionPerformed
        // TODO add your handling code here:
        int row = table.getSelectedRow();
        String i = itemf.getText();
        if (i.equals("")) {
            JOptionPane.showConfirmDialog(this, "Please Select Product In The Table You Want that You Want To Remove!", "WARNING!", JOptionPane.WARNING_MESSAGE);
        } else {
            int x = JOptionPane.showConfirmDialog(this, "Are You Sure You Want To Remove This Product?", "WARNING!", JOptionPane.WARNING_MESSAGE);

            if (x == 0) {

                try {
                    String cell = table.getModel().getValueAt(row, 0).toString();
                    String sql = "DELETE FROM `items` WHERE code='" + cell + "'";
                    ps = con.prepareStatement(sql);
                    ps.execute();

                    JOptionPane.showMessageDialog(this, "You Deleted The Item  " + i + " ", "ERROR", JOptionPane.ERROR_MESSAGE);
                    String users = User.getText();
                    String transaction = "Removed the Item " + i + "";
                    String code = codefield.getText();
                    String dates = dat.getText();
                    String times = timer.getText();
                    String available = aquantf.getText();

                    ps = con.prepareStatement("INSERT INTO `transactions`(user,transaction,date,time,code,item,quantity) VALUES (?,?,?,?,?,?,?)");

                    ps.setString(1, users);
                    ps.setString(2, transaction);
                    ps.setString(3, dates);
                    ps.setString(4, times);
                    ps.setString(5, code);
                    ps.setString(6, i);
                    ps.setString(7, available);

                    ps.executeUpdate();
                    codefield.setText("");
                    itemf.setText("");
                    descripf.setText("");
                    aquantf.setText("");
                    status.setText("");
                } catch (SQLException e) {
                    JOptionPane.showMessageDialog(this, "ERROR!", "ERROR", JOptionPane.ERROR_MESSAGE);

                }
                table();
//                codef.setText("");
//                pnf.setText("");
//                cf.setText("");
//                pf.setText("");
//                spf.setText("");
//                aqf.setText("");
//                availf.setText("");
            } else {

            }
        }
        try {

        } catch (Exception e) {
        }

    }//GEN-LAST:event_removeitemActionPerformed

    private void additemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_additemActionPerformed
        // TODO add your handling code here:
        addnewitem ad = new addnewitem();
        ad.show();
        dispose();
    }//GEN-LAST:event_additemActionPerformed

    private void tableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMouseClicked
        // TODO add your handling code here:

        try {
            int row = table.getSelectedRow();
            String Tclick = (table.getModel().getValueAt(row, 0).toString());
            String cat = (table.getModel().getValueAt(row, 3).toString());
            Integer cate = Integer.valueOf(cat);
            String sql = "select * from items where code = '" + Tclick + "'";
            ps = con.prepareStatement(sql);
            rs = ps.executeQuery();

            if (rs.next()) {
                String codes = rs.getString("code");
                codefield.setText(codes);
                String items = rs.getString("item");
                itemf.setText(items);
                String descriptions = rs.getString("description");
                descripf.setText(descriptions);
                String avails = rs.getString("quantity");
                aquantf.setText(avails);
                String stats = rs.getString("status");
                status.setText(stats);
            }
            if (cate <= 10 && cate >= 1) {
                JOptionPane.showMessageDialog(null, "Your Stock Quantity On This Product Is Running Low! Please Add Your Stock Now!", "Warning", JOptionPane.ERROR_MESSAGE);
            }
            if (cate == 0) {
                JOptionPane.showMessageDialog(null, "You Don't Have Any Stock Available In This Product! Please Add Your Stock Now!", "Warning", JOptionPane.ERROR_MESSAGE);
            }
        } catch (SQLException e) {
        }
    }//GEN-LAST:event_tableMouseClicked

    private void lowstockActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lowstockActionPerformed
        // TODO add your handling code here:
        lowstock();

    }//GEN-LAST:event_lowstockActionPerformed

    private void allActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_allActionPerformed
        // TODO add your handling code here:
        table();
    }//GEN-LAST:event_allActionPerformed

    private void stockinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stockinActionPerformed
        // TODO add your handling code here:
        con = connection.connectDB();
        String c = mquantf.getText();

        if (c.equals("")) {
            JOptionPane.showMessageDialog(this, "Please Input Quantity You Want To Add Or Deduct In Your Current Stock! ");
        } else {
            try {
                Integer a = Integer.parseInt(aquantf.getText());
                Integer b = Integer.parseInt(mquantf.getText());
                int total = a + b;
                String ans = Integer.toString(total);

                int id = rs.getInt(1);

                ps = con.prepareStatement("UPDATE `items` SET  quantity=? where id=?");
                int x = JOptionPane.showConfirmDialog(this, "Are You Sure You Want To Stock In " + c + " Quantity In Your Stocks?", "WARNING!", JOptionPane.WARNING_MESSAGE);
                if (x == 0) {
                    ps.setString(1, ans);
                    ps.setInt(2, id);
                    ps.executeUpdate();
                    JOptionPane.showMessageDialog(this, "You Have Succesfully Stock In " + c + " Quantity In Your Stocks", "WARNING!", JOptionPane.PLAIN_MESSAGE);

                    String users = User.getText();
                    String transaction = "Stock In " + c + " Quantity";
                    String code = codefield.getText();
                    String item = itemf.getText();
                    String available = ans;
                    String dates = dat.getText();
                    String times = timer.getText();

                    ps = con.prepareStatement("INSERT INTO `transactions`(user,transaction,date,time,code,item,quantity) VALUES (?,?,?,?,?,?,?)");

                    ps.setString(1, users);
                    ps.setString(2, transaction);
                    ps.setString(3, dates);
                    ps.setString(4, times);
                    ps.setString(5, code);
                    ps.setString(6, item);
                    ps.setString(7, available);

                    ps.executeUpdate();
                    codefield.setText("");
                    itemf.setText("");
                    descripf.setText("");
                    aquantf.setText("");
                    status.setText("");
                } else {
                    JOptionPane.showMessageDialog(this, "Cancelled!");
//                    codef.setText("");
//                    pnf.setText("");
//                    cf.setText("");
//                    pf.setText("");
//                    aqf.setText("");
//                    mqf.setText("");
//                    availf.setText("");

                }

            } catch (HeadlessException | SQLException e) {
                JOptionPane.showMessageDialog(this, "ERROR", "WARNING!", JOptionPane.ERROR_MESSAGE);
            }

            table();
        }

    }//GEN-LAST:event_stockinActionPerformed

    private void stockoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stockoutActionPerformed
        // TODO add your handling code here:
        con = connection.connectDB();
        String c = mquantf.getText();

        if (c.equals("")) {
            JOptionPane.showMessageDialog(this, "Please Input Quantity You Want To Add Or Deduct In Your Current Stock! ");
        } else {
            try {
                Integer a = Integer.parseInt(aquantf.getText());
                Integer b = Integer.parseInt(mquantf.getText());
                int total = a - b;
                String ans = Integer.toString(total);
//              

                int id = rs.getInt(1);

                ps = con.prepareStatement("UPDATE `items` SET  quantity=? where id=?");
                int x = JOptionPane.showConfirmDialog(this, "Are You Sure You Want To Stock Out " + c + " Quantity In Your Stocks?", "WARNING!", JOptionPane.WARNING_MESSAGE);
                if (x == 0) {
                    ps.setString(1, ans);
                    ps.setInt(2, id);
                    ps.executeUpdate();
                    JOptionPane.showMessageDialog(this, "You Have Succesfully Stock Out " + c + " Quantity In Your Stocks", "WARNING!", JOptionPane.PLAIN_MESSAGE);

                    String users = User.getText();
                    String transaction = "Stock Out " + c + " Quantity";
                    String code = codefield.getText();
                    String item = itemf.getText();
                    String available = ans;
                    String dates = dat.getText();
                    String times = timer.getText();

                    ps = con.prepareStatement("INSERT INTO `transactions`(user,transaction,date,time,code,item,quantity) VALUES (?,?,?,?,?,?,?)");

                    ps.setString(1, users);
                    ps.setString(2, transaction);
                    ps.setString(3, dates);
                    ps.setString(4, times);
                    ps.setString(5, code);
                    ps.setString(6, item);
                    ps.setString(7, available);

                    ps.executeUpdate();
                    codefield.setText("");
                    itemf.setText("");
                    descripf.setText("");
                    aquantf.setText("");
                    status.setText("");
                } else {
                    JOptionPane.showMessageDialog(this, "Cancelled!");
//                    codef.setText("");
//                    pnf.setText("");
//                    cf.setText("");
//                    pf.setText("");
//                    aqf.setText("");
//                    mqf.setText("");
//                    availf.setText("");

                }

            } catch (HeadlessException | SQLException e) {
                JOptionPane.showMessageDialog(this, "ERROR", "WARNING!", JOptionPane.ERROR_MESSAGE);
            }

            table();
        }

    }//GEN-LAST:event_stockoutActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(staffinventory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(staffinventory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(staffinventory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(staffinventory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new staffinventory().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel User;
    private javax.swing.JButton additem;
    private javax.swing.JButton all;
    private javax.swing.JTextField aquantf;
    private javax.swing.JTextField codefield;
    private javax.swing.JLabel dat;
    private javax.swing.JTextField descripf;
    private javax.swing.JTextField itemf;
    private javax.swing.JButton jButton7;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton lowstock;
    private javax.swing.JTextField mquantf;
    private javax.swing.JButton removeitem;
    private javax.swing.JTextField status;
    private javax.swing.JButton stockin;
    private javax.swing.JButton stockout;
    private javax.swing.JTable table;
    private javax.swing.JLabel timer;
    private javax.swing.JButton updateitem;
    private javax.swing.JLabel userid;
    // End of variables declaration//GEN-END:variables
}
